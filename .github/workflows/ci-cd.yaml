name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
    paths-ignore:
      - '**/*.md'

  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'

jobs:
  # ==================================
  # JOB 1: Tests API Backend
  # ==================================
  test-api:
    name: 🔗 Tests API Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./back
    
    steps:
      - name: 📥 Récupérer le code
        uses: actions/checkout@v4
        
      - name: 🏗️ Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./back/package-lock.json
          
      - name: 📦 Installer les dépendances
        run: npm ci
        
      - name: 🔄 Sync Postman collections
        run: npm run postman:sync
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        continue-on-error: true
        
      - name: 🚀 Démarrer l'application
        run: |
          npm start &
          sleep 15
        env:
          NODE_ENV: test
          PORT: ${{ secrets.PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          
      - name: 🧪 Test - Authentification
        run: npm run test:api:auth
        continue-on-error: false
        
      - name: 🧪 Test - Techniciens
        run: npm run test:api:technicians
        continue-on-error: true
        
      - name: 🧪 Test - Companies
        run: npm run test:api:company
        continue-on-error: true
        
      - name: 🧪 Test - Bicycles
        run: npm run test:api:bicycle
        continue-on-error: true
        
      - name: 🧪 Test - Zones
        run: npm run test:api:zones
        continue-on-error: true
        
      - name: 🧪 Test - Interventions
        run: npm run test:api:intervention
        continue-on-error: true

  # ===================================  
  # JOB 2: Tests unitaires Backend
  # ===================================
  test-unit-backend:
    name: 🧪 Tests Unitaires Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./back
    
    steps:
      - name: 📥 Récupérer le code
        uses: actions/checkout@v4
        
      - name: 🏗️ Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./back/package-lock.json
          
      - name: 📦 Installer les dépendances
        run: npm ci
        
      - name: 🧪 Lancer les tests unitaires
        run: npm run test:unit
        continue-on-error: true

  # ===================================
  # JOB 3: Build et Tests Frontend
  # ===================================
  test-frontend:
    name: 🎨 Frontend Build & Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./front
    
    steps:
      - name: 📥 Récupérer le code
        uses: actions/checkout@v4
        
      - name: 🏗️ Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./front/package-lock.json
          
      - name: 📦 Installer les dépendances
        run: npm ci
        
      - name: 🧪 Tests unitaires Frontend
        run: npm run test:ci
        continue-on-error: true

  # ===================================
  # JOB 4: Tests E2E Cypress (optionnel)
  # ===================================
  test-e2e:
    name: 🔍 Tests E2E Cypress
    runs-on: ubuntu-latest
    needs: [test-api, test-frontend]  # Attend que API et Frontend soient OK
    if: needs.test-api.result == 'success' && needs.test-frontend.result == 'success'

    steps:
      - name: 📥 Récupérer le code
        uses: actions/checkout@v4
        
      # Démarrer le backend
      - name: 🏗️ Setup Node.js pour Backend
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./back/package-lock.json
          
      - name: 📦 Installer dépendances Backend
        run: npm ci
        working-directory: ./back
        
      - name: 🚀 Démarrer Backend
        run: |
          npm start &
          sleep 15
        working-directory: ./back
        env:
          NODE_ENV: test
          PORT: 3000
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        
      # Démarrer le frontend  
      - name: 📦 Installer dépendances Frontend
        run: npm ci
        working-directory: ./front
        
      - name: 🎨 Démarrer Frontend
        run: |
          npm start &
          sleep 30
        working-directory: ./front
        
      # Tests Cypress
      - name: 🔍 Tests Cypress E2E
        run: npm run cypress:run
        working-directory: ./front
        continue-on-error: true

  # ===================================
  # JOB 5: Résultats
  # ===================================
  results:
    name: 📊 Résultats
    runs-on: ubuntu-latest
    needs: [test-api, test-unit-backend, test-frontend, test-e2e]
    if: always()
    
    steps:
      - name: 📊 Afficher les résultats
        run: |
          echo "============================================="
          echo "📊 RÉSULTATS COMPLETS DES TESTS"
          echo "============================================="
          echo "🔗 Tests API Backend: ${{ needs.test-api.result }}"
          echo "🧪 Tests unitaires Backend: ${{ needs.test-unit-backend.result }}"
          echo "🎨 Build & Tests Frontend: ${{ needs.test-frontend.result }}"
          echo "🔍 Tests E2E Cypress: ${{ needs.test-e2e.result }}"
          echo "============================================="
          
          # Résumé final
          if [[ "${{ needs.test-api.result }}" == "success" ]] && [[ "${{ needs.test-frontend.result }}" == "success" ]]; then
            echo "🎉 BUILD PRINCIPAL: SUCCÈS"
            echo "✅ L'application est prête pour le déploiement"
          else
            echo "❌ BUILD PRINCIPAL: ÉCHEC"
            echo "🚨 Des problèmes critiques empêchent le déploiement"
          fi