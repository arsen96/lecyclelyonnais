name: CI/CD Pipeline
on:
  push:
    branches:
      - main
      - develop
      - feature/*
    paths-ignore:
      - '**/*.md'

  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - '**/*.md'

permissions:
  contents: read
  security-events: write

jobs:
  # # JOB 1: Build des images Docker (SANS PUSH) 
  # build-docker:
  #   name: Build Images Docker
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
  #   permissions:
  #     contents: read
  #     packages: write
    
  #   steps:
  #     - name: Récupérer le code
  #       uses: actions/checkout@v4
      
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
      
  #     # BACKEND - BUILD SEULEMENT
  #     - name: Build Backend
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./back
  #         push: false
  #         tags: lecycle-backend:test
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     # FRONTEND -BUILD SEULEMENT    
  #     - name: Build Frontend
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./front
  #         push: false
  #         tags: lecycle-frontend:test
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # JOB 2: Tests API Backend   
  test-api:
    name: Tests API
    runs-on: ubuntu-latest
    needs: build-docker

    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_DB: lecycle_ci_test
          POSTGRES_USER: ci_test_user
          POSTGRES_PASSWORD: ci_test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: ./back
    
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
        
      - name: Installer PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
        
      - name: Initialiser la base de données
        run: |
          psql postgresql://ci_test_user:ci_test_pass@localhost:5432/lecycle_ci_test < back/schema-ci.sql
        working-directory: ./
        
      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./back/package-lock.json
          
      - name: Installer les dépendances
        run: npm ci
        
      - name: Sync Postman collections
        run: npm run postman:sync
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        continue-on-error: false
        
      - name: Démarrer l'application
        run: |
          npm start &
          sleep 15
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_NAME: lecycle_ci_test
          DB_USER: ci_test_user
          DB_PASSWORD: ci_test_pass
          DB_PORT: 5432
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          
      - name: Test - Authentification
        run: npm run test:api:auth
        continue-on-error: false
        
      - name: Test - Techniciens
        run: npm run test:api:technicians
        continue-on-error: false
        
      - name: Test - Companies
        run: npm run test:api:company
        continue-on-error: false
        
      - name: Test - Bicycles
        run: npm run test:api:bicycle
        continue-on-error: false
        
      - name: Test - Zones
        run: npm run test:api:zones
        continue-on-error: false
        
      - name: Test - Interventions
        run: npm run test:api:intervention
        continue-on-error: false
  # JOB 3: Tests unitaires Backend
  test-unit-backend: 
    name: Tests Unitaires Backend
    runs-on: ubuntu-latest
    needs: build-docker

    defaults:
      run:
        working-directory: ./back
    
    steps:
      - name: Récupérer le code 
        uses: actions/checkout@v4
        
      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./back/package-lock.json
          
      - name: Installer les dépendances
        run: npm ci
        
      - name: Lancer les tests unitaires
        run: npm run test:unit
        continue-on-error: false

  # JOB 4: Tests Frontend 
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: build-docker

    defaults:
      run:
        working-directory: ./front
    
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
        
      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./front/package-lock.json
          
      - name: Installer les dépendances
        run: npm ci
        
      - name: Tests unitaires Frontend
        run: npm run test:ci
        continue-on-error: false

  # JOB 5: Tests E2E Cypress 
  test-e2e:
    name: Tests E2E Cypress
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
        
      # Démarrer le backend
      - name: Setup Node.js pour Backend
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ./back/package-lock.json
          
      - name: Installer dépendances Backend
        run: npm ci
        working-directory: ./back
        
      - name: Démarrer Backend
        run: |
          npm start &
          sleep 15
        working-directory: ./back
        env:
          NODE_ENV: test
          PORT: 3000
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        
      # Démarrer le frontend  
      - name: Installer dépendances Frontend
        run: npm ci
        working-directory: ./front
        
      - name: Démarrer Frontend
        run: |
          npm start &
          sleep 30
        working-directory: ./front
        
      # Tests Cypress
      - name: Tests Cypress E2E
        run: npm run cypress:run
        working-directory: ./front
        continue-on-error: false

  # JOB 6: Push des images Docker (APRÈS tests validés)
  push-docker:
    name: Push Images Docker  
    runs-on: ubuntu-latest
    needs: [test-api, test-unit-backend, test-frontend, test-e2e]
    if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # BACKEND - BUILD ET PUSH
      - name: Build et Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./back
          push: true
          tags: |
             ${{ secrets.DOCKER_USERNAME }}/lecycle-backend:${{ github.ref_name }}
             ${{ github.ref == 'refs/heads/main' && format('{0}/lecycle-backend:latest', secrets.DOCKER_USERNAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # FRONTEND - BUILD ET PUSH
      - name: Build et Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./front
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/lecycle-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/lecycle-frontend:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # JOB 7: Analyse de sécurité
  security-scan:
    name: Analyse de sécurité
    runs-on: ubuntu-latest
    needs: push-docker
    if: needs.push-docker.result == 'success'
    
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
      
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Scan Backend avec Trivy
        uses: aquasecurity/trivy-action@master
        id: scan-backend
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/lecycle-backend:${{ github.ref_name }}
          format: sarif
          output: trivy-backend-results.sarif
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true
          exit-code: '0'
      
      - name: Scan Frontend avec Trivy
        uses: aquasecurity/trivy-action@master
        id: scan-frontend
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/lecycle-frontend:${{ github.ref_name }}
          format: sarif
          output: trivy-frontend-results.sarif
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true
          exit-code: '0'
      
      - name: Upload résultats Backend
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-backend-results.sarif
          category: trivy-backend
        continue-on-error: true
      
      - name: Upload résultats Frontend
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-frontend-results.sarif
          category: trivy-frontend
        continue-on-error: true

  # JOB 8: Déploiement Test
  deploy-test: 
    name: Déploiement Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: needs.security-scan.result == 'success' && github.ref == 'refs/heads/develop'
    environment: test
    
    steps:
      - name: Déployer sur serveur test 
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}   
          port: 2222
          script: |
            cd ~/projet/lecyclelyonnais
            docker pull arsenkubat/lecycle-backend:develop
            docker pull arsenkubat/lecycle-frontend:develop
            docker compose -f docker-compose-test.yml down
            docker compose -f docker-compose-test.yml up -d 
            docker ps
            docker system prune -f

  # JOB 9: Déploiement Production
  deploy-production:
    name: Déploiement Production
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/main' && needs.security-scan.result == 'success'
    environment: production
    
    steps:
      - name: Déployer sur le serveur
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}   
          port: 2222
          script: |
            cd ~/projet/lecyclelyonnais
            docker pull arsenkubat/lecycle-backend:latest
            docker pull arsenkubat/lecycle-frontend:latest
            docker compose down
            docker compose up -d
            docker ps
            docker system prune -f